@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using FuryKanban.Client.Core.Security
@using FuryKanban.Client.Core
@using System.Net.Http.Headers
@using BlazorAnimate
@using FuryKanban.Client.Shared.Components
@using FuryKanban.Shared.Interfaces

@inject AppHttpClient Http
@inject AppStateService AppStateService
@inject AuthenticationStateProvider AuthenticationStateProvider
@foreach (var error in ErrorList)
{
	<div class="row">
		<div class="alert alert-warning alert-dismissible fade show" role="alert">
			<strong>@error.ErrorMessage</strong>.
			<button class="close" type="button" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
		</div>
	</div>
}
	<AuthorizeView>
		<NotAuthorized>
			<RedirectToLogin />
		</NotAuthorized>
		<Authorized>
			<div class="row testimonial-group">
				@foreach (var item in AppStateService.State.Stages)
				{
					<div class="col-4 col-lg-4 col-md-4 col-xs-4">
						<StageComponent Stage="item">
							<Wrapper>
								@foreach (var item in item.Issues)
								{
									<IssueComponent Issue="item"></IssueComponent>
								}
							</Wrapper>
						</StageComponent>
					</div>
				}
				<ColumnEdit></ColumnEdit>
			</div>
		</Authorized>
	</AuthorizeView>

	@code {
		private List<IErrorResult> ErrorList = new List<IErrorResult>();

		protected override async Task OnInitializedAsync()
		{
			AppStateService.OnStateChanged += OnStateChanged;

			var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
			var user = authState.User;

			if (user.Identity.IsAuthenticated)
			{
				var appState = await Http.GetAsyncEx<FuryKanban.Shared.Model.AppStateResponse>("api/app");
				AppStateService.SetState(appState.AppState);
			}

			Http.OnApiError += OnApiError;
		}

		private void OnStateChanged(object sender, EventArgs e)
		{
			base.StateHasChanged();
		}

		private void OnApiError(object sender, IErrorResult error)
		{
			//todo- show error
		}
	}