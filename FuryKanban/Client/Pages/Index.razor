@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using FuryKanban.Client.Core.Security
@using FuryKanban.Client.Core
@using System.Net.Http.Headers
@using BlazorAnimate
@using FuryKanban.Client.Shared.Components
@using FuryKanban.Shared.Interfaces
@using FuryKanban.Shared.Model

@inject AppHttpClient Http
@inject AppStateService AppStateService
@inject IssueService IssueService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DragndropService DragndropService
@inject LoaderService LoaderService
@foreach (var error in ErrorList)
{
	<div class="row">
		<div class="alert alert-warning alert-dismissible fade show" role="alert">
			<strong>@error.ErrorMessage</strong>.
			<button class="close" type="button" data-dismiss="alert" aria-label="Close"><span aria-hidden="true">×</span></button>
		</div>
	</div>
}
<AuthorizeView>
	<NotAuthorized>
		<RedirectToLogin />
	</NotAuthorized>
	<Authorized Context="Auth">
		<div class="testimonial-group">
			<div class="row">
				@foreach (var stage in AppStateService.State.Stages)
				{
					<div class="col-4 col-lg-4 col-md-4 col-xs-4">
						<StageComponent Stage="stage">
							<Wrapper>
								<DropzoneComponent Id="0"></DropzoneComponent>
								@foreach (var issue in stage.Issues.OrderBy(p => p.Order))
								{
									<IssueComponent Issue="issue"></IssueComponent>
								}
							</Wrapper>
						</StageComponent>
					</div>
				}
				<ColumnEdit></ColumnEdit>
			</div>
		</div>
	</Authorized>
</AuthorizeView>

@code {
	private List<IErrorResult> ErrorList = new List<IErrorResult>();

	protected override async Task OnInitializedAsync()
	{
		AppStateService.OnStateChanged += OnStateChanged;

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity.IsAuthenticated)
		{
			await LoaderService.LoadStart();
			var appState = await Http.GetAsyncEx<FuryKanban.Shared.Model.AppStateResponse>("api/app");
			AppStateService.SetState(appState.AppState);
			await LoaderService.LoadEnd();
		}

		//todo unsub
		Http.OnApiError += OnApiError;
		DragndropService.OnDrop +=async (sender, arg) => await Drop();
	}

	private void OnStateChanged(object sender, EventArgs e)
	{
		base.StateHasChanged();
	}

	private void OnApiError(object sender, IErrorResult error)
	{
		//todo- show error
	}

	public async Task Drop()
	{
		var issueReorder = new IssueReorder()
		{
			Id = DragndropService.DragId,
			TargetId = DragndropService.DropId,
			NewStageId = DragndropService.ParentId
		};
		await IssueService.ReorderIssueAsync(issueReorder);
	}
}