@using Microsoft.AspNetCore.Components.Authorization
@using FuryKanban.Client.Core.Security
@using FuryKanban.Client.Core
@using System.Net.Http.Headers
@using BlazorAnimate

@inject AppHttpClient Http
@inject StageService StageService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DragndropService DragndropService
<Animate Animation="Animations.FadeRight" Duration="TimeSpan.FromSeconds(1)">
	<div class="card card-accent-warning">
		<div class="card-header">
			@if (ShowEdit)
			{
				<StageEditComponent Stage="Stage" AfterSave="() => ShowEdit = !ShowEdit"></StageEditComponent>
			}
			else
			{
				@Stage.Title
				<div class="card-header-actions">
					<button class="btn card-header-action" @onclick="() => ShowIssueEdit = !ShowIssueEdit" type="button">
						<i class="fa fa-plus"></i>
					</button>
					<DropdownComponent>
						<Wrapper>
							<a class="dropdown-item" @onclick="() => ShowEdit = !ShowEdit"><i class="fa fa-pencil"></i>&nbsp;&nbsp;Edit</a>
							<div class="dropdown-divider"></div>
							<a class="dropdown-item" @onclick="async () => await StageService.DeleteStageAsync(Stage)"><i class="fa fa-close"></i>&nbsp;&nbsp;Delete</a>
						</Wrapper>
					</DropdownComponent>
				</div>
			}

		</div>

		@if (ShowIssueEdit)
		{
			<div class="card-body bg-secondary" style="padding-bottom:0px; margin-bottom:0px">
				<IssueEditComponent Issue="new FuryKanban.Shared.Model.AppState.Issue() { StageId = Stage.Id }" AfterSave="()=>ShowIssueEdit = false" AfterCancel="() => ShowIssueEdit = false"></IssueEditComponent>
			</div>
		}
		<div class="card-body bg-secondary" style="padding-top:0px" ondragover="event.preventDefault();" @ondrop="() => DragndropService.ParentDrop(Stage.Id)">
			@if (Wrapper != null)
			{
				@Wrapper
			}
		</div>
	</div>
</Animate>

@code {
	[Parameter]
	public FuryKanban.Shared.Model.AppState.Stage Stage { set; get; }

	[Parameter]
	public RenderFragment Wrapper { get; set; }

	private bool ShowEdit = false;

	private bool ShowIssueEdit = false;
}
