@using FuryKanban.Shared.Interfaces
@using FuryKanban.Client.Core
@inject FuryKanban.Client.Core.LoaderService LoaderService
@inject FuryKanban.Client.Core.AppStateService AppStateService
@inject FuryKanban.Client.Core.Security.SecurityService SecurityService
@inject AppHttpClient Http
<header class="c-header c-header-light c-header-fixed">
	<ul class="c-header-nav d-md-down-none">
		<li class="c-header-nav-item px-3">
			@if (_showLoader)
			{
				<div style="height:30px; width:59px" class="text-center">
					<i class="spinner-border spinner-border"></i>
				</div>
			}
			else
			{
				<img src="/FuryKanban.png" class="fk-brand-logo" />
			}
		</li>
		<li class="c-header-nav-item px-3">
			<div class="btn-group" role="group" aria-label="Button group with nested dropdown">
				<div class="btn-group" role="group">
					@if (AppStateService.State.UndoList.Any())
					{
						<button class="btn btn-secondary" title="Undo" type="button" @onclick="async () => await HistoryClick(AppStateService.State.UndoList.OrderByDescending(p=>p.Id).First().Id)"><i class="fa fa-undo"></i></button>
						<button class="btn btn-secondary dropdown-toggle" id="btnGroupDrop1" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true"></button>
						<div class="dropdown-menu" aria-labelledby="btnGroupDrop1" style="position: absolute; left: 0px; top: 0px; margin: 0px; right: auto; bottom: auto; transform: translate(0px, 35px);" data-popper-placement="bottom-start">
							@foreach (var item in AppStateService.State.UndoList.OrderByDescending(p => p.Id))
							{
								<a class="dropdown-item" @onclick="async () => await HistoryClick(item.Id)">@item.Title</a>
							}
						</div>
					}
					else
					{
						<button class="btn btn-secondary" type="button" disabled><i class="fa fa-undo"></i></button>
						<button class="btn btn-secondary dropdown-toggle" disabled id="btnGroupDrop1" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true"></button>
					}
				</div>
			</div>
			@*todo- revert to table<button class="btn btn-secondary" type="button"><i class="fa fa-repeat"></i></button>*@
		</li>
		@if (!String.IsNullOrWhiteSpace(_errorText))
		{
			<li class="c-header-nav-item px-3">
				<button class="btn btn-danger" @onclick="() => _errorText=String.Empty"> @_errorText</button>
			</li>
		}
	</ul>
	<ul class="c-header-nav  mfs-auto">
		<li class="c-header-nav-item">
			<a class="btn" title="Logout" @onclick="async () => await SecurityService.LogOut()"><i class="fa fa-sign-out"></i></a>
		</li>
	</ul>
</header>

@code {
	private bool _showLoader { set; get; } = false;
	private string _errorText = "";

	protected override async Task OnInitializedAsync()
	{
		//todo- unsub
		LoaderService.OnStart += ShowLoader;
		LoaderService.OnEnd += HideLoader;
		AppStateService.OnStateChanged += OnStateChanged;
		Http.OnApiError += OnApiError;
	}
	private void ShowLoader(object sender, EventArgs e)
	{
		_showLoader = true;
		StateHasChanged();
	}

	private void HideLoader(object sender, EventArgs e)
	{
		_showLoader = false;
		StateHasChanged();
	}

	private void OnStateChanged(object sender, EventArgs e)
	{
		StateHasChanged();
	}

	private async Task HistoryClick(int id)
	{
		await AppStateService.LoadHistoryAsync(id);
	}

	private void OnApiError(object sender, IErrorResult error)
	{
		_errorText = error.ErrorMessage;
		StateHasChanged();
	}
}
