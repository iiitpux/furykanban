@page "/"
@using Microsoft.AspNetCore.Components.Authorization
@using FuryKanban.Client.Core.Security
@using FuryKanban.Client.Core
@using System.Net.Http.Headers
@using BlazorAnimate
@using FuryKanban.Client.Shared.Components
@using FuryKanban.Shared.Interfaces
@using FuryKanban.Shared.Model

@inject AppHttpClient Http
@inject AppStateService AppStateService
@inject IssueService IssueService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject DragndropService DragndropService
@inject LoaderService LoaderService

@implements IDisposable
<AuthorizeView>
	<NotAuthorized>
		<RedirectToLogin />
	</NotAuthorized>
	<Authorized Context="Auth">
		<div class="testimonial-group">
			<div class="row">
				@foreach (var stage in AppStateService.State.Stages.OrderBy(p => p.Id))
				{
<div class="col-4 col-lg-4 col-md-4 col-xs-4">
	<StageComponent Stage="stage">
		<Wrapper>
			<DropzoneComponent Id="0"></DropzoneComponent>
			@foreach (var issue in stage.Issues.OrderBy(p => p.Order))
			{
<IssueComponent Issue="issue"></IssueComponent>}
		</Wrapper>
	</StageComponent>
</div>}
				<AddStageComponent></AddStageComponent>
			</div>
		</div>
	</Authorized>
</AuthorizeView>

@code { 
	private List<IErrorResult> ErrorList = new List<IErrorResult>();

	EventHandler OnDropHandler = null;

	protected override async Task OnInitializedAsync()
	{
		AppStateService.OnStateChanged += OnStateChanged;

		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;

		if (user.Identity.IsAuthenticated)
		{
			await AppStateService.LoadStateAsync();
		}

		OnDropHandler = async (sender, arg) => await Drop();
		DragndropService.OnDrop += OnDropHandler;
	}

	private void OnStateChanged(object sender, EventArgs e)
	{
		StateHasChanged();
	}

	public async Task Drop()
	{
		var issueReorder = new IssueReorder()
		{
			Id = DragndropService.DragId,
			TargetId = DragndropService.DropId,
			NewStageId = DragndropService.ParentId
		};
		await IssueService.ReorderIssueAsync(issueReorder);
	}

	public void Dispose()
	{
		DragndropService.OnDrop -= OnDropHandler;
	}
}